<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAJAAAAcAAAAOIAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AOIAAABwAAAACQAAAHEAAADzAAAA8QAAANAAAADNAAAAzQAAAM0AAADNAAAAzQAAAM0AAADNAAAAzQAA
        AM0AAADNAAAAzQAAAM0AAADNAAAAzQAAAM0AAADNAAAAzQAAAM0AAADNAAAAzQAAAM0AAADNAAAAzQAA
        AM0AAADQAAAA8QAAAPMAAABxAAAA4QAAAPIAAABZAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAA
        ABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAA
        ABAAAAAQAAAAEAAAABAAAABaAAAA8gAAAOEAAAD/AAAA0QAAABIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAADRAAAA/wAAAP8AAADNAAAAEAAAAAAAAAAEAAAAGAAA
        ABwAAAAcAAAAHAAAABcAAAADAAAAAAAAAAAAAAANAAAAHAAAABwAAAAcAAAAHAAAAA0AAAAAAAAAAAAA
        AAMAAAAXAAAAHAAAABwAAAAcAAAAGAAAAAQAAAAAAAAAEAAAAM0AAAD/AAAA/wAAAM0AAAAQAAAAAAAA
        AE8AAADYAAAA3wAAAOAAAADfAAAA1AAAAEMAAAAAAAAACwAAAKEAAADgAAAA4AAAAOAAAADgAAAAoQAA
        AAsAAAAAAAAAQwAAANQAAADfAAAA4AAAAN8AAADXAAAATwAAAAAAAAAQAAAAzQAAAP8AAAD/AAAAzQAA
        ABAAAAAAAAAAewAAAP8AAADlAAAA0gAAAOgAAAD/AAAAawAAAAAAAAAYAAAA2QAAAPoAAADXAAAA1wAA
        APoAAADZAAAAGAAAAAAAAABrAAAA/wAAAOgAAADSAAAA5QAAAP8AAAB7AAAAAAAAABAAAADNAAAA/wAA
        AP8AAADNAAAAEAAAAAAAAAB7AAAA/wAAAHIAAAAJAAAAgQAAAP8AAABrAAAAAAAAABgAAADbAAAA2wAA
        ACQAAAAkAAAA2wAAANsAAAAYAAAAAAAAAGsAAAD/AAAAgQAAAAkAAAByAAAA/wAAAHsAAAAAAAAAEAAA
        AM0AAAD/AAAA/wAAAM0AAAAQAAAAAAAAAHsAAAD/AAAAdgAAABEAAACFAAAA/wAAAGsAAAAAAAAAGAAA
        ANsAAADcAAAAKwAAACsAAADcAAAA2wAAABgAAAAAAAAAawAAAP8AAACFAAAAEQAAAHYAAAD/AAAAewAA
        AAAAAAAQAAAAzQAAAP8AAAD/AAAAzQAAABAAAAAAAAAAewAAAP8AAADrAAAA3QAAAO4AAAD/AAAAawAA
        AAAAAAAYAAAA2AAAAPwAAADhAAAA4QAAAPwAAADYAAAAGAAAAAAAAABrAAAA/wAAAO4AAADdAAAA6wAA
        AP8AAAB7AAAAAAAAABAAAADNAAAA/wAAAP8AAADNAAAAEAAAAAAAAABJAAAAzQAAANUAAADVAAAA1QAA
        AMkAAAA+AAAAAAAAAAkAAACXAAAA1gAAANUAAADVAAAA1gAAAJcAAAAJAAAAAAAAAD0AAADJAAAA1QAA
        ANUAAADVAAAAzQAAAEkAAAAAAAAAEAAAAM0AAAD/AAAA/wAAAM0AAAAQAAAAAAAAAAIAAAAQAAAAEwAA
        ABMAAAATAAAADwAAAAEAAAAAAAAAAAAAAAkAAAAUAAAAFAAAABQAAAAUAAAACQAAAAAAAAAAAAAAAQAA
        AA8AAAATAAAAEwAAABMAAAAQAAAAAgAAAAAAAAAQAAAAzQAAAP8AAAD/AAAAzQAAABAAAAAAAAAAAwAA
        ABMAAAAXAAAAFwAAABcAAAASAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAAEgAAABcAAAAXAAAAFwAAABMAAAADAAAAAAAAABAAAADNAAAA/wAAAP8AAADNAAAAEAAA
        AAAAAABMAAAA0gAAANoAAADbAAAA2gAAAM4AAABAAAAAAAAAAAAAAAAAAAAAJAAAAEkAAAALAAAAAAAA
        AAAAAAAAAAAAAAAAAEAAAADOAAAA2gAAANsAAADaAAAA0gAAAEwAAAAAAAAAEAAAAM0AAAD/AAAA/wAA
        AM0AAAAQAAAAAAAAAHsAAAD/AAAA6AAAANcAAADqAAAA/wAAAGsAAAAAAAAAAAAAACwAAADIAAAA+QAA
        AIYAAAAJAAAAAAAAAAAAAAAAAAAAawAAAP8AAADqAAAA1wAAAOgAAAD/AAAAewAAAAAAAAAQAAAAzQAA
        AP8AAAD/AAAAzQAAABAAAAAAAAAAewAAAP8AAABzAAAADAAAAIIAAAD/AAAAawAAAAAAAAATAAAAwAAA
        AP0AAADzAAAA+QAAAIYAAAAJAAAAAAAAAAAAAABrAAAA/wAAAIIAAAAMAAAAdAAAAP8AAAB7AAAAAAAA
        ABAAAADNAAAA/wAAAP8AAADNAAAAEAAAAAAAAAB7AAAA/wAAAHMAAAAMAAAAggAAAP8AAABrAAAAAAAA
        ABQAAACvAAAAlwAAAFEAAADaAAAA+gAAAIQAAAAGAAAAAAAAAGsAAAD/AAAAggAAAAwAAAB0AAAA/wAA
        AHsAAAAAAAAAEAAAAM0AAAD/AAAA/wAAAM0AAAAQAAAAAAAAAHsAAAD/AAAA6AAAANcAAADqAAAA/wAA
        AGsAAAAAAAAAAAAAAAwAAAAIAAAAAAAAAEEAAADcAAAA2wAAABwAAAAAAAAAawAAAP8AAADqAAAA1wAA
        AOgAAAD/AAAAewAAAAAAAAAQAAAAzQAAAP8AAAD/AAAAzQAAABAAAAAAAAAATAAAANIAAADaAAAA2wAA
        ANoAAADOAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAABBAAAABAAAAAAAAABAAAAAzgAA
        ANoAAADbAAAA2gAAANIAAABMAAAAAAAAABAAAADNAAAA/wAAAP8AAADNAAAAEAAAAAAAAAADAAAAFAAA
        ABgAAAAYAAAAGAAAABMAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAATAAAAGAAAABgAAAAYAAAAFAAAAAMAAAAAAAAAEAAAAM0AAAD/AAAA/wAAAM0AAAAQAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAzQAAAP8AAAD/AAAA0QAA
        ACMAAAATAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAA
        ABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAEwAAACMAAADRAAAA/wAA
        AP8AAAD3AAAA2AAAANUAAADVAAAA1QAAANUAAADVAAAA1QAAANUAAADVAAAA1QAAANUAAADVAAAA1QAA
        ANUAAADVAAAA1QAAANUAAADVAAAA1QAAANUAAADVAAAA1QAAANUAAADVAAAA1QAAANUAAADVAAAA2AAA
        APcAAAD/AAAA/wAAAPkAAADgAAAA3gAAAN4AAADeAAAA3gAAAN4AAADeAAAA3gAAAN4AAADeAAAA3gAA
        AN4AAADeAAAA3gAAAN4AAADeAAAA3gAAAN4AAADeAAAA3gAAAN4AAADeAAAA3gAAAN4AAADeAAAA3gAA
        AN4AAADgAAAA+QAAAP8AAAD/AAAA0gAAACgAAAAZAAAAGgAAABoAAAAaAAAAGgAAABoAAAAaAAAAGgAA
        ABoAAAAaAAAAGgAAABoAAAAaAAAAGgAAABoAAAAaAAAAGgAAABoAAAAaAAAAGgAAABoAAAAaAAAAGgAA
        ABoAAAAaAAAAGQAAACgAAADSAAAA/wAAAP8AAADNAAAAEAAAAAAAAAAAAAAAAAAAAAcAAAAGAAAAAAAA
        AAAAAAAAAAAAAAAAAAYAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
        AAYAAAAHAAAAAAAAAAAAAAAAAAAAEAAAAM0AAAD/AAAA/wAAANEAAAATAAAAAAAAAAAAAAALAAAAmgAA
        AI8AAAAGAAAAAAAAAAAAAAAJAAAAlgAAAJMAAAAIAAAAAAAAAAAAAAAIAAAAkwAAAJYAAAAJAAAAAAAA
        AAAAAAAGAAAAjwAAAJoAAAALAAAAAAAAAAAAAAATAAAA0QAAAP8AAADhAAAA8gAAAFsAAAARAAAADwAA
        ACoAAADhAAAA1gAAACIAAAAQAAAAEAAAACcAAADeAAAA2gAAACUAAAAQAAAAEAAAACUAAADaAAAA3gAA
        ACcAAAAQAAAAEAAAACIAAADWAAAA4QAAACoAAAAPAAAAEQAAAFsAAADyAAAA4AAAAHEAAAD0AAAA8wAA
        ANMAAADPAAAA1QAAAPkAAAD3AAAA0wAAANAAAADQAAAA1QAAAPkAAAD4AAAA1AAAANAAAADQAAAA1AAA
        APgAAAD5AAAA1QAAANAAAADQAAAA0wAAAPcAAAD5AAAA1QAAAM8AAADTAAAA8wAAAPQAAABxAAAABwAA
        AGEAAADGAAAA4QAAAOIAAADlAAAA+wAAAPoAAADkAAAA4gAAAOIAAADlAAAA+wAAAPsAAADkAAAA4gAA
        AOIAAADkAAAA+wAAAPsAAADlAAAA4gAAAOIAAADkAAAA+gAAAPsAAADlAAAA4gAAAOEAAADGAAAAYQAA
        AAcAAAAAAAAAAAAAAA4AAAAcAAAAHAAAADUAAADjAAAA2AAAAC0AAAAcAAAAHAAAADIAAADfAAAA3AAA
        ADAAAAAcAAAAHAAAADAAAADcAAAA3wAAADIAAAAcAAAAHAAAAC0AAADYAAAA4wAAADUAAAAcAAAAHAAA
        AA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwAAAMMAAAC1AAAACQAAAAAAAAAAAAAADQAA
        AL4AAAC6AAAACwAAAAAAAAAAAAAACwAAALoAAAC+AAAADQAAAAAAAAAAAAAACQAAALUAAADDAAAADwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH///+BAYGAgQEAgIEBAICBAQCAgQEAgIEBAICBAQ
        CAgQGBgIEB/4CBAceAgQGDgIEBAYCBAQCAgQGQgIEB+ICBAf+Agf///4AAAAAAAAAAAAAAAAAAAAABzz
        zzgYYYYYAAAAAAAAAAAAAAAAwAAAA/hhhh8=
</value>
  </data>
</root>